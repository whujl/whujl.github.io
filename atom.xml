<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[遥远的小村庄]]></title>
  <subtitle><![CDATA[仰望星空，脚踏实地]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2016-03-21T16:44:35.368Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Jiao Long]]></name>
    <email><![CDATA[whuroger@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[ReentrantLock源码解析]]></title>
    <link href="http://yoursite.com/2016/03/22/ReentrantLock%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>http://yoursite.com/2016/03/22/ReentrantLock源码解析/</id>
    <published>2016-03-21T16:39:03.000Z</published>
    <updated>2016-03-21T16:39:03.000Z</updated>
    <content type="html"><![CDATA[<h2 id="概述">概述</h2>
<p>对于ReentrantLock,通常是这么使用它的：</p>
<figure class="highlight Java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</div><div class="line"><span class="keyword">try</span>{</div><div class="line">	lock.lock();</div><div class="line">	dosomething();</div><div class="line">}<span class="keyword">finally</span>{</div><div class="line">	lock.unlock();</div><div class="line">}</div></pre></td></tr></table></figure>

<p>ReentrantLock会保证 do something在同一时间只有一个线程在执行这段代码，或者说，同一时刻只有一个线程的lock方法会返回。其余线程会被挂起，直到获取锁。从这里可以看出，其实ReentrantLock实现的就是一个独占锁的功能：有且只有一个线程获取到锁，其余线程全部挂起，直到该拥有锁的线程释放锁，被挂起的线程被唤醒重新开始竞争锁。</p>
<p>那么我们先从lock方法看起：</p>
<h2 id="lock方法">lock方法</h2>
<figure class="highlight Java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span>() {</div><div class="line">	sync.lock();</div><div class="line">}</div></pre></td></tr></table></figure>

<p>而sync对象是在构造器中初始化，这里ReentrantLock提供了两种不同的实现方式：</p>
<figure class="highlight Java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="title">ReentrantLock</span>() {</div><div class="line">	sync = <span class="keyword">new</span> NonfairSync();</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="title">ReentrantLock</span>(<span class="keyword">boolean</span> fair) {</div><div class="line">	sync = fair ? <span class="keyword">new</span> FairSync() : <span class="keyword">new</span> NonfairSync();</div><div class="line">}</div></pre></td></tr></table></figure>

<p>从字面上可以看出是分为公平锁和非公平锁，默认构造器是非公平锁。</p>
<ul>
<li>公平锁：每个线程抢占锁的顺序为先后调用lock方法的顺序依次获取锁。</li>
<li>非公平锁：每个线程抢占锁的顺序不定，谁运气好，谁就获取到锁，和调用lock方法的先后顺序无关。</li>
</ul>
<p>先看公平锁的lock方法实现：</p>
<figure class="highlight Java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> <span class="keyword">void</span> lock() {</div><div class="line">	acquire(<span class="number">1</span>);</div><div class="line">}</div></pre></td></tr></table></figure>

<p>因为FairSync以及NonFairSync都继承与AbstractQueuedSynchronizer(本文简称AQS)，这里acquire方法直接调用了AQS的实现。</p>
<figure class="highlight Java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span>(<span class="keyword">int</span> arg) {</div><div class="line">	<span class="keyword">if</span> (!tryAcquire(arg) && acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</div><div class="line">		selfInterrupt();</div><div class="line">   }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>继续查看tryAcquire方法：</p>
<figure class="highlight Java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span>(<span class="keyword">int</span> acquires) {</div><div class="line">	<span class="keyword">final</span> Thread current = Thread.currentThread();<span class="comment">//获取当前线程</span></div><div class="line">    <span class="keyword">int</span> c = getState(); <span class="comment">//获取volatile状态位</span></div><div class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) { </div><div class="line">	    <span class="keyword">if</span> (!hasQueuedPredecessors() && compareAndSetState(<span class="number">0</span>, acquires)) {</div><div class="line">	    <span class="comment">//如果队列中没有其他线程,也就说明没有其他线程占有锁。</span></div><div class="line">	    <span class="comment">//并且通过CAS方法修改状态位为1成功，acquires是在lock方法中传来的1.</span></div><div class="line">			setExclusiveOwnerThread(current);<span class="comment">//设置当前线程拥有锁。</span></div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        }</div><div class="line">    }<span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) {</div><div class="line">    <span class="comment">//如果c不等于0，说明有线程持有锁，而ReentrantLock是可重入锁，因此当前线程可以再次lock。</span></div><div class="line">		<span class="keyword">int</span> nextc = c + acquires;</div><div class="line">       	<span class="keyword">if</span> (nextc &lt; <span class="number">0</span>)</div><div class="line">        	<span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</div><div class="line">       	setState(nextc);<span class="comment">//将状态位加1</span></div><div class="line">       	<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"> 	}</div><div class="line"> 	<span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">//如果获得锁成功返回true, 否则false</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>如果tryAcquire(1)没有获得锁，返回false, 那么接着执行acquireQueued(Node.EXCLUSIVE)方法，这里根据方法名称猜测这个方法似乎是将当前线程放入一个队列中去(达到了阻塞目的)。</p>
<p>先查看Node对象属性以及这个EXCLUSIVE含义：</p>
<figure class="highlight Java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> class Node {</div><div class="line">	<span class="keyword">static</span> <span class="keyword">final</span> Node SHARED = <span class="keyword">new</span> Node();<span class="comment">//指定这个Node类型为共享类型</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Node EXCLUSIVE = <span class="keyword">null</span>;<span class="comment">//Node为独占类型</span></div><div class="line">    <span class="keyword">volatile</span> <span class="keyword">int</span> waitStatus;</div><div class="line">    <span class="keyword">volatile</span> Node prev;</div><div class="line">    <span class="keyword">volatile</span> Node next;</div><div class="line">    <span class="keyword">volatile</span> Thread thread;<span class="comment">//对应的线程</span></div><div class="line">    Node nextWaiter;</div><div class="line">    Node(Thread thread, Node mode) {            </div><div class="line">    	<span class="keyword">this</span>.nextWaiter = mode;</div><div class="line">        <span class="keyword">this</span>.thread = thread;</div><div class="line">    }</div></pre></td></tr></table></figure>

<p>那么说明addWaiter(Node.EXCLUSIVE)方法是添加独占类型节点，因为ReentrantLock是独占锁。在AQS中维护了一个队列，每次有线程竞争锁失败，都是添加到队列尾部。</p>
<figure class="highlight Java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> Node <span class="title">addWaiter</span>(Node mode) {</div><div class="line">	<span class="comment">//创建一个包含当前线程的Node，并且为独占类型</span></div><div class="line">	Node node = <span class="keyword">new</span> Node(Thread.currentThread(), mode);</div><div class="line">	Node pred = tail;</div><div class="line">	<span class="keyword">if</span> (pred != <span class="keyword">null</span>) { <span class="comment">//如果队列不为空</span></div><div class="line">		node.prev = pred;</div><div class="line">		<span class="keyword">if</span> (compareAndSetTail(pred, node)) { <span class="comment">//通过CAS方式将队列尾节点设置为这个node</span></div><div class="line">        	pred.next = node;</div><div class="line">        	<span class="keyword">return</span> node;</div><div class="line">		}</div><div class="line">	}</div><div class="line">	enq(node);<span class="comment">//如果队列为空或者CAS方式添加节点失败,通过自旋方式添加。</span></div><div class="line">	<span class="keyword">return</span> node;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>回来看acquireQueued方法：</p>
<figure class="highlight Java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> acquireQueued(<span class="keyword">final</span> Node node, <span class="keyword">int</span> arg) {</div><div class="line">	<span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</div><div class="line">	<span class="keyword">try</span> {</div><div class="line">		<span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">for</span> (;;) {</div><div class="line">			<span class="keyword">final</span> Node p = node.predecessor();</div><div class="line">			<span class="keyword">if</span> (p == head && tryAcquire(arg)) {<span class="comment">//如果当前的节点是head说明他是队列中第一个“有效的”节点，尝试获取锁。</span></div><div class="line">				setHead(node);    </div><div class="line">				p.next = <span class="keyword">null</span>;</div><div class="line">				failed = <span class="keyword">false</span>;</div><div class="line">				<span class="keyword">return</span> interrupted;</div><div class="line">			}</div><div class="line">			<span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) && parkAndCheckInterrupt())</div><div class="line">			<span class="comment">//否则，检查前一个节点的状态，看当前获取锁失败的线程是否需要挂起。</span></div><div class="line">			<span class="comment">//如果需要，借助JUC包下的LockSopport类的静态方法Park挂起当前线程。知道被唤醒。</span></div><div class="line">				interrupted = <span class="keyword">true</span>;</div><div class="line">		}</div><div class="line">	} <span class="keyword">finally</span> {</div><div class="line">		<span class="keyword">if</span> (failed)</div><div class="line">			cancelAcquire(node);<span class="comment">// 如果有异常就取消请求，将当前节点从队列中移除。</span></div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>从上面可以看出，当一个线程试着获取锁时：</p>
<ul>
<li>成功获取到锁，不用进入AQS队列。</li>
<li>失败，被挂起，等待下次唤醒后继续循环尝试获取锁。</li>
</ul>
<h2 id="unlock方法">unlock方法</h2>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="概述">概述</h2>
<p>对于ReentrantLock,通常是这么使用它的：</p>
<figure class="highlight Java"><table><tr><td class="gutter"><pre><div class="line">1<]]>
    </summary>
    
      <category term="Java，JUC，源码" scheme="http://yoursite.com/tags/Java%EF%BC%8CJUC%EF%BC%8C%E6%BA%90%E7%A0%81/"/>
    
      <category term="JUC源码分析" scheme="http://yoursite.com/categories/JUC%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《HTTP权威指南》读书笔记1 - 连接管理]]></title>
    <link href="http://yoursite.com/2015/08/09/http%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B01/"/>
    <id>http://yoursite.com/2015/08/09/http权威指南读书笔记1/</id>
    <published>2015-08-09T06:11:51.000Z</published>
    <updated>2016-03-21T16:43:48.000Z</updated>
    <content type="html"><![CDATA[<h2 id="1-HTTP如何使用TCP连接">1.HTTP如何使用TCP连接</h2>
<h3 id="1-1_TCP连接">1.1 TCP连接</h3>
<p>HTTP通信是基于TCP/IP，web浏览器与服务器的交互如下图：<br><img src="/img/HTTPConnections_1.jpg" alt="alt text"></p>
<p>TCP为HTTP提供了一条可靠的比特传输管道， TCP会按序、无差错的传输HTTP数据。</p>
<h3 id="1-2_TCP流是分段的，由IP分组传输">1.2 TCP流是分段的，由IP分组传输</h3>
<p>TCP数据是通过IP分组或IP数据报传输，而HTTP通信基于TCP/IP，所以HTTP处于”HTTP over TCP over IP”协议栈的顶层。HTTPS是在HTTP与TCP之间插入了一层密码加密层(TLS或SSL)，层次图如下：<br><img src="/img/HTTPConnections_2.jpg" alt="alt text"></p>
<p>当HTTP需要传输消息时，会以流的形式将报文数据的内容通过一条打开的TCP连接按序传输。TCP收到数据流之后，会将数据流砍成被称作段的小数据块，并将段封装在IP分组中，通过因特网进行传输。</p>
<p>每一个TCP段都是由IP分组承载，由一个IP地址发送到另外一个IP地址。每个IP组都包含：</p>
<ul>
<li>一个IP分组首部(通常为20字节)</li>
<li>一个TCP段首部(通常为20字节)</li>
<li>一个TCP数据块(0个或多个字节)</li>
</ul>
<p>IP首部包含了源和目的IP地址、长度和其他一些标记。TCP段的首部包含了TCP端口号、TCP控制标记，以及用于数据排序和完整性检查的一些数字值:</p>
<p><img src="/img/HTTPConnections_3.jpg" alt="alt text"></p>
<h3 id="1-3_保持TCP连接的正确运行">1.3 保持TCP连接的正确运行</h3>
<p>TCP是通过端口号来保持TCP连接的正确运行的，通过以下4个值来区分不同的TCP连接：</p>
<ul>
<li>&lt;源IP地址、源端口号、目的IP地址、目的端口号&gt;</li>
</ul>
<h2 id="2-对TCP性能的考虑">2.对TCP性能的考虑</h2>
<h3 id="2-1_HTTP事务时延">2.1 HTTP事务时延</h3>
<p>下图描述了HTTP事务主要的连接、传输以及处理时延：<br><img src="/img/HTTPConnections_4.jpg" alt="alt text"></p>
<p>与建立TCP连接，以及传输请求和响应报文的时间相比，事务处理时间可能是很短的。除非客户端或服务器超载，或正在处理复杂的动态资源，否则HTTP时延就是由TCP网络时延构成的。</p>
<p>HTTP事务的时延有以下几种主要原因：</p>
<ul>
<li>DNS寻址时延，如果DNS没有被本地缓存，通过DNS解析系统将URI中的主机名转换成一个IP地址可能要花费数十秒的时间。</li>
<li>连接时延，TCP三次握手开销。</li>
<li>传输时延，HTTP请求通过TCP管道传输造成的时延。</li>
<li>处理时延，web服务器写回HTTP response也需要时间。</li>
</ul>
<p><img src="/img/HTTPConnections_5.png" alt="alt text"></p>
<h3 id="2-2_TCP连接握手时延">2.2 TCP连接握手时延</h3>
<p><img src="/img/HTTPConnections_6.jpg" alt="alt text"></p>
<p>当HTTP事务传输数据很少时，TCP的SYN/SYN+ACK握手会产生一个可以测量的时延。小的HTTP事务可能花费超过50%的时间在TCP连接建立。因此需要利用长连接等特性来复用这个TCP连接。</p>
<h3 id="2-3_延迟确认(Delayed_ACK)">2.3 延迟确认(Delayed ACK)</h3>
<p>每个TCP段都有一个序列号和一个数据完整性校验和(data-integrity checksum)。每个段的接收者收到完好的段时，都会向发送者回送一个小的确认分组。如果发送者没有在指定的窗口时间内收到确认信息，发送者就会认为分组已被破坏或损毁，并重发数据.</p>
<p>由于确认报文很小，所以TCP允许在发往相同方向的输出数据分组中对其进行“捎带”。TCP将返回的确认信息与输出的数据分组结合在一起，可以更有效地利用网络。TCP在何时发送ack给对方有以下规定：</p>
<ol>
<li>当有响应数据要发送时,ack会随响数据立即发送给对方.</li>
<li>如果没有响应数据,ack的发送将会有一个延迟,以等待看是否有响应数据可以一起发送,这称是”Delayed Ack”.但这个延迟最多不会超过500ms,一般为200ms.如果在200ms内有数据要发送,那么ack会随数据一起立即发送给对方.<strong>注意这里的延迟200ms,不是指的从接受到对方数据到发送ack的最长等待时间差.而是指的内核启动的一个定时器,它每隔200ms就查看下是否有ack要发送.</strong>例如:假设定时器在0ms时启动,对方的数据段在<br>185ms时到达,那么ack最迟会在200ms时发送,而不是385ms时发送.</li>
<li>如果在等待发送ack期间,对方的第二个数据段又到达了,这时要立即发送ack.但是如果对方的三个数据段相继到达,那么第二个数据段到达时ack立即发送,但第三个数据段到达时是否立即发送,则取决于上面两条.</li>
</ol>
<h3 id="2-4_TCP慢启动">2.4 TCP慢启动</h3>
<p>TCP数据传输的性能还取决于TCP连接的使用期（age）。TCP连接会随着时间进行自我“调谐”，起初会限制连接的最大速度，如果数据成功传输，会随着时间的推移提高传输的速度。这种调谐被称为TCP慢启动（slow start），用于防止因特网的突然过载和拥塞。</p>
<p>可以使用持久连接来解决慢启动问题。</p>
<h3 id="2-5_Nagle算法">2.5 Nagle算法</h3>
<p>Nagle算法鼓励发送全尺寸（LAN上最大尺寸的分组大约是1500字节，在因特网上是几百字节）的段。只有当所有其他分组都被确认之后，Nagle算法才允许发送非全尺寸的分组。如果其他分组仍然在传输过程中，就将那部分数据缓存起来。只有当挂起分组被确认，或者缓存中积累了足够发送一个全尺寸分组的数据时，才会将缓存的数据发送出去。</p>
<p>下面是Nagle算法的伪代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> there is <span class="keyword">new</span> data to send</div><div class="line">  <span class="keyword">if</span> the window size &gt;= MSS and available data is &gt;= MSS</div><div class="line">    send complete MSS segment now</div><div class="line">  <span class="keyword">else</span></div><div class="line">    <span class="keyword">if</span> there is unconfirmed data still in the pipe</div><div class="line">      enqueue data in the buffer until an acknowledge is received</div><div class="line">    <span class="keyword">else</span></div><div class="line">      send data immediately</div><div class="line">    end <span class="keyword">if</span></div><div class="line">  end <span class="keyword">if</span></div><div class="line">end <span class="keyword">if</span></div></pre></td></tr></table></figure>

<h3 id="2-6_Nagle算法与Delayed_ACK同时出现的问题">2.6 Nagle算法与Delayed ACK同时出现的问题</h3>
<p>A 和B进行数据传输 :  A运行Nagle算法，B运行delayed ACK算法：</p>
<ol>
<li>A-&gt;B 发一个packet, B不回应，delay ACK</li>
<li>A-&gt;B 再发一个packet</li>
<li>B收到第二个packet(数据包)，这时候会回应第一个packet(数据包)，即第一个ACK</li>
<li>假设这时候A里的数据已经&lt;MSS，则A将停止发送数据，等待第二个packet(数据包)的ACK</li>
</ol>
<p>此时问题就来了，因为A没有收到第二个packet的ACK确认，同时数据&lt;MSS，由Nagle算法可以得知，这段数据将被被存到缓冲区等待发送，同时这时候B也在等A再发一个packet然后再回应一个ACK,所以这样A和B就发生了死锁了，但是Delayed Ack是有等待机制的，就是会等待500ms,一般是200ms，如果在这200ms内有数据数据要发送(ACK)，就回应一个packet(数据包)的ACK,这样就会打破这种死锁的问题。即只有当200ms(或小于200ms)的延迟过后双方才会继续传输。</p>
<h3 id="2-7_TIME_WAIT累积与端口耗尽">2.7 TIME_WAIT累积与端口耗尽</h3>
<p>当某个TCP端点关闭TCP连接时，会在内存中维护一个小的控制块，用来记录所关闭的连接的IP地址和端口号。这个信息通常只能存在一个小时间段。这个算法可以防止在短时间内创建、关闭具有相同IP和端口号的连接。</p>
<p>TIME_WAIT的作用：允许老的重复分组在网络中消失，防止最后ACK的丢失，可靠地实现TCP全双工通信的终止。</p>
<h2 id="3_HTTP连接的处理">3 HTTP连接的处理</h2>
<p>Connection首部可以提供三种类型不同的标签：</p>
<ul>
<li>HTTP首部字段名，列出了只与此连接有关的首部</li>
<li>任意标签纸，用于描述此连接的非标准选项</li>
<li>close，说明操作完成后需要关闭这条持久连接</li>
</ul>
<h3 id="3-1_并行连接(Parallel_Connections)">3.1 并行连接(Parallel Connections)</h3>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="1-HTTP如何使用TCP连接">1.HTTP如何使用TCP连接</h2>
<h3 id="1-1_TCP连接">1.1 TCP连接</h3>
<p>HTTP通信是基于TCP/IP，web浏览器与服务器的交互如下图：<br><img src="/img/HTTPC]]>
    </summary>
    
      <category term="HTTP" scheme="http://yoursite.com/tags/HTTP/"/>
    
      <category term="HTTP" scheme="http://yoursite.com/categories/HTTP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[static关键字]]></title>
    <link href="http://yoursite.com/2014/11/01/static%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <id>http://yoursite.com/2014/11/01/static关键字/</id>
    <published>2014-11-01T14:27:42.000Z</published>
    <updated>2016-03-21T16:41:00.000Z</updated>
    <content type="html"><![CDATA[<h3 id="static关键字">static关键字</h3>
<p>使用static关键字的时机:</p>
<ul>
<li>希望没有创建对象就可以使用某个方法。</li>
<li>无论创建多少对象时，都希望为某个特殊的域(field)分配单一存储空间。</li>
</ul>
<p>当声明一个事物是static时，就意味着这个field或function不会与包含它的那个类的任何对象实例关联在一起。所以即使没有创建类的实例，也可以通过访问类的static的field或function.</p>
<p>使用类名是引用static变量的首选方式：</p>
<ul>
<li>强调了这个变量的static属性。</li>
<li>为编译器优化创造了更好的机会。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="static关键字">static关键字</h3>
<p>使用static关键字的时机:</p>
<ul>
<li>希望没有创建对象就可以使用某个方法。</li>
<li>无论创建多少对象时，都希望为某个特殊的域(field)分配单一存储空间。</li>
</ul]]>
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[抽象语法树]]></title>
    <link href="http://yoursite.com/2014/10/26/%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91/"/>
    <id>http://yoursite.com/2014/10/26/抽象语法树/</id>
    <published>2014-10-26T12:11:39.000Z</published>
    <updated>2016-03-21T16:44:22.000Z</updated>
    <content type="html"><![CDATA[<p>Abstract Syntax Tree</p>
<h3 id="The_Abstract_Syntax_Tree">The Abstract Syntax Tree</h3>
<p><strong>抽象语法树</strong>是Eclipse处理源代码的方式，每一个Java源文件都可以用AST的节点来表示。这些节点都是ASTNode的子类。每一个子类都代表Java语言中的一个element。例如：MethodDeclaration是用来描述方法声明的节点，VariableDeclarationFragment用来描述变量声明。一个频繁使用的node是<strong>SimpleName</strong>,SimpleName是Java源代码中的除了<strong>关键词</strong>、<strong>布尔表达式</strong>或者<strong>null</strong>外的任何一个字符串。</p>
<p>所有与AST相关的类都位于org.eclipse.jdt.core.dom包中。</p>
<h3 id="Parsing_source_code">Parsing source code</h3>
<p><strong>ASTParser</strong>将Java代码解析为AST，它即可以解析整个Java文件也可以包括部分Java代码。</p>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> CompilationUnit <span class="title">parse</span>(ICompilationUnit unit){</div><div class="line">    ASTParser parser = ASTParser.newParser(AST.JLS3);</div><div class="line">    parser.setKind(ASTParser.K_COMPILATION_UNIT);</div><div class="line">	parser.setSource(unit); <span class="comment">// set source</span></div><div class="line">	parser.setResolveBindings(<span class="keyword">true</span>); <span class="comment">// we need bindings later on</span></div><div class="line">	<span class="keyword">return</span> (CompilationUnit) parser.createAST(<span class="keyword">null</span> <span class="comment">/* IProgressMonitor */</span>);      <span class="comment">// parse</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>通过<strong>ASTParser.newParser(AST.JLS3)</strong>,我们让解析器通过Java语言标准第三版来解析代码。<br><strong>parser.setKind(ASTParser.K_COMPILATION_UNIT)</strong>告诉解析器需要解析ICompilationUnit,ICompilation是一个Java文件。</p>
<h3 id="Java_Model">Java Model</h3>
<p>Java Model将一个Java项目展示为一种树形结构，展示为大家都知道的”Package Explorer”视图：<br><img src="http://www.eclipse.org/articles/Article-JavaCodeManipulation_AST/images/java-model-overview.png" alt="Alt text"></p>
<figure class="highlight Java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();</div><div class="line">IProject project = root.getProject(<span class="string">"someJavaProject"</span>);</div><div class="line">project.open(<span class="keyword">null</span> <span class="comment">/* IProgressMonitor */</span>);</div><div class="line">		</div><div class="line">IJavaProject javaProject = JavaCore.create(project);</div><div class="line">IType lwType = javaProject.findType(<span class="string">"net.sourceforge.earticleast.app.Activator"</span>);</div><div class="line">ICompilationUnit lwCompilationUnit = lwType.getCompilationUnit();</div></pre></td></tr></table></figure>

<h3 id="How_to_find_an_AST_node">How to find an AST node</h3>
<p>即使是一个简单地“Hello World”的项目经过解析生成的AST也是非常的复杂的。那么这时如何拿到<em>println(“Hello World”)</em>?扫描所有的节点是可以做到的，但是并不方便。</p>
<p>更好的解决方案是：每一个<strong>ASTNode</strong>允许经过一个<strong>visitor</strong>查询子节点(<a href="http://en.wikipedia.org/wiki/Visitor_pattern" target="_blank" rel="external">visitor pattern</a>)。每一个<strong>ASTNode</strong>子类都有两个方法：visit()、endVisit()。<strong>ASTNode</strong>上定义了两个方法：preVisit(ASTNode node)和postVisit(ASTNode node).</p>
<figure class="highlight Java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">visit</span>(VariableDeclarationStatement node){</div><div class="line">    <span class="keyword">for</span>(Iterator iter = node.fragments().iterator();iter.hasNext();){</div><div class="line">        VariableDeclarationFragment fragment = (VariableDeclarationFragment) iter.next();</div><div class="line">        <span class="comment">//... store these fragments somewhere</span></div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// prevent that SimpleName is interpreted as reference</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>当visit()返回false时，subtree的访问节点都不被考虑。</p>
<h3 id="Objtaining_Information_from_an_AST_Node">Objtaining Information from an AST Node</h3>
<p>每一个<strong>ASTNode</strong>的子类都含有它代表的Java元素的详细信息。例如，一个<em>MethodDeclaration</em>将会含有方法的名字，返回类型，参数等信息。一个节点的信息被称为<em>structural properties</em>。</p>
<p>对于下面的方法而言：</p>
<figure class="highlight Java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span>(BundleContext context) <span class="keyword">throws</span> Exception {</div><div class="line">    <span class="keyword">super</span>.start(context);</div><div class="line">}</div></pre></td></tr></table></figure>

<p>下面的图表示它的结构化的属性：<br><img src="http://www.eclipse.org/articles/Article-JavaCodeManipulation_AST/images/md-astview.png" alt="Alt text"></p>
<p>可以通过静态方法或者泛型方法得到节点的结构化属性：</p>
<ul>
<li>static methods: 每个节点都共有的方法去访问它们的属性：例如getName(), exceptions(), 等等。</li>
<li>generic method: 使用<em>getStructuralProperty(StructuralPropertyDescriptor property)</em>方法拿到节点属性值。每一个AST的子类都定义了一系列的<strong>StructuralPropertyDescriptor</strong>, <strong>StructuralPropertyDescriptor</strong>都可以直接通过它们属于的类访问。</li>
</ul>
<p><strong>Sructural Properties</strong>分为三种不同的类型：</p>
<ul>
<li>properties that hold simple values</li>
<li>properties which contain a single child AST node</li>
<li>properties which contain a list of child AST nodes.</li>
</ul>
<h2 id="Bindings">Bindings</h2>
<h2 id="Error_Recovery">Error Recovery</h2>
<p>从Eclipse3.2以后，AST/DOM支持从错误的语法中恢复代码，如果需要使用这个属性，你需要使用ASTParser#setStatementsRecovery(). 正如它的名字所说，错误恢复是在声明级别完成的。错误恢复并不能应用于所有的语法错误，对于简单地忘记分号却已经不再是问题。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {</div><div class="line">	System.out.print(<span class="string">"Hello"</span>);</div><div class="line">	System.out.print(<span class="string">", "</span>)</div><div class="line">	System.out.println(<span class="string">"World!"</span>);</div><div class="line">}</div></pre></td></tr></table></figure>

<p>对于上面的代码，在Eclipse3.2以前，这个方法体将会是空的，现在可以通过错误恢复有可能能够拿到那些方法调用。</p>
<h2 id="How_to_Apply_Changes">How to Apply Changes</h2>
<h2 id="Write_it_down">Write it down</h2>
<p>当你使用ASTRewrite或者直接更改树的节点，这些改动将被重新写回Java源文件，因此一个TextEdit对象将会被创建，这时代码将会离开AST的环境，而进入一个基本文本的环境。<strong>TextEdit</strong>对象含有基于字符的更改信息，它是<em>org.eclipse.text</em>插件的一部分。</p>
<p>可以通过以下两种不同的方式获取<strong>TextEdit</strong>对象：</p>
<ul>
<li>如果使用ASTRewrite,请求<em>ASTRewrite</em>的实例调用<em>rewriteAST(IDocument, Map)</em>方法获取<strong>TextEdit</strong>对象。</li>
<li><p>如果直接修改AST节点，<strong>TextEdit</strong>对象通过<em>CompilationUnit</em>的rewrite(IDocument document, Map options)获得。<br>对于<em>rewrite(IDocument document, Map options)</em>方法，第一个参数<em>document</em>包含了需要被修改的源代码，第二个参数是一个关于源代码格式化可选项的映射，传null就是使用默认的选项。</p>
</li>
<li><p>当需要解析的源代码是一个char[]时，或者IDocument对象很容易，创建一个*org.eclipse.jface.text.Document对象，并且将这个char[]数组作为构造器参数传入。</p>
</li>
<li>当需要解析的源代码是Java源文件时，你不能直接写入到这个文件，因为你有可能不是唯一操作这个源文件的编辑器。对于Eclipse，Java编辑器并不是直接写至源文件，而是使用一个拷贝代替。</li>
</ul>
<p>下面的代码表示了如何进行写操作：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">ITextFileBufferManager bufferManager = FileBuffers.getTextFileBufferManager(); <span class="comment">// get the buffer manager</span></div><div class="line">IPath path = unit.getJavaElement().getPath(); <span class="comment">// unit: instance of CompilationUnit</span></div><div class="line"><span class="keyword">try</span> {</div><div class="line">	bufferManager.connect(path, <span class="keyword">null</span>); <span class="comment">// (1)</span></div><div class="line">	ITextFileBuffer textFileBuffer = bufferManager.getTextFileBuffer(path);</div><div class="line">	<span class="comment">// retrieve the buffer</span></div><div class="line">	IDocument document = textFileBuffer.getDocument(); (<span class="number">2</span>)</div><div class="line">	<span class="comment">// ... edit the document here ... </span></div><div class="line">	</div><div class="line">  <span class="comment">// commit changes to underlying file</span></div><div class="line">	textFileBuffer</div><div class="line">		.commit(<span class="keyword">null</span> <span class="comment">/* ProgressMonitor */</span>, <span class="keyword">false</span> <span class="comment">/* Overwrite */</span>); <span class="comment">// (3)</span></div><div class="line"></div><div class="line">} <span class="keyword">finally</span> {</div><div class="line">	bufferManager.disconnect(path, <span class="keyword">null</span>); <span class="comment">// (4)</span></div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="Managing_Comments">Managing Comments</h3>
<p>修改AST中一个最困难的就是处理comment.<strong>CompilationUnit#getCommentList()</strong>方法可以返回comments的集合，但是这个集合不能被修改，这意味着即使AST Rewriter往一个可编译单元中添加了一个comment，新的comment也无法出现在这个comment的集合中。</p>
<p>下面的代码片段可以用来添加comment：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">CompilationUnit astRoot= ... ; <span class="comment">// get the current compilation unit</span></div><div class="line"></div><div class="line">ASTRewrite rewrite= ASTRewrite.create(astRoot.getAST());</div><div class="line">Block block= ((TypeDeclaration) astRoot.types().get(<span class="number">0</span>)).getMethods()[<span class="number">0</span>].getBody();</div><div class="line">ListRewrite listRewrite= rewrite.getListRewrite(block, Block.STATEMENTS_PROPERTY);</div><div class="line">Statement placeHolder= rewrite.createStringPlaceholder(<span class="string">"//mycomment"</span>, ASTNode.EMPTY_STATEMENT);</div><div class="line">listRewrite.insertFirst(placeHolder, <span class="keyword">null</span>);</div><div class="line"></div><div class="line">textEdits= rewrite.rewriteAST(document, <span class="keyword">null</span>);</div><div class="line">textEdits.apply(document);</div></pre></td></tr></table></figure>

<p>如果comment是javadoc comment，可以使用getJavadoc()方法获得相应的声明。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Abstract Syntax Tree</p>
<h3 id="The_Abstract_Syntax_Tree">The Abstract Syntax Tree</h3>
<p><strong>抽象语法树</strong>是Eclipse处理源代码的方式，每一个Java源文件都可以用AST的节点来表示。这些节点都是ASTNode的子类。每一个子类都代表Java语言中的一个element。例如：MethodDeclaration是用来描述方法声明的节点，VariableDeclarationFragment用来描述变量声明。一个频繁使用的node是<strong>SimpleName</strong>,SimpleName是Java源代码中的除了<strong>关键词</strong>、<strong>布尔表达式</strong>或者<strong>null</strong>外的任何一个字符串。</p>
<p>所有与AST相关的类都位于org.eclipse.jdt.core.dom包中。</p>
<h3 id="Parsing_source_code">Parsing source code</h3>
<p><strong>ASTParser</strong>将Java代码解析为AST，它即可以解析整个Java文件也可以包括部分Java代码。</p>
]]>
    
    </summary>
    
      <category term="AST" scheme="http://yoursite.com/tags/AST/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Eclipse Plugin" scheme="http://yoursite.com/tags/Eclipse-Plugin/"/>
    
      <category term="Eclipse Plugin Development" scheme="http://yoursite.com/categories/Eclipse-Plugin-Development/"/>
    
  </entry>
  
</feed>
